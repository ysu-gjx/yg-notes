(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{383:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"代码规范-利用lint工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码规范-利用lint工具"}},[t._v("#")]),t._v(" 代码规范：利用lint工具")]),t._v(" "),a("blockquote",[a("p",[t._v("代码不仅是让机器看的，它也是给人看的。")])]),t._v(" "),a("p",[t._v("在真实的工程项目中，尤其是多人协作的场景下，代码规范就变得非常重要了，它可以用来统一团队代码风格，避免不同风格的代码混杂到一起难以阅读，有效"),a("strong",[t._v("提高代码质量")]),t._v("，甚至可以将一些"),a("strong",[t._v("语法错误")]),t._v("在开发阶段提前规避掉。但仅有规范本身不够，我们需要"),a("strong",[t._v("自动化的工具")]),t._v("(即Lint 工具)来保证规范的落地，把代码规范检查(包括"),a("code",[t._v("自动修复")]),t._v(")这件事情交给机器完成，开发者只需要专注应用逻辑本身。")]),t._v(" "),a("p",[t._v("本节，我们将一起来完成 "),a("code",[t._v("Lint")]),t._v(" 工具链在项目中的落地，实现自动化代码规范检查及修复的能力。学完本节内容后，你不仅能熟悉诸如"),a("code",[t._v("ESLint")]),t._v("、"),a("code",[t._v("Prettier")]),t._v("、"),a("code",[t._v("Stylelint")]),t._v("和"),a("code",[t._v("Commitlint")]),t._v(" 等诸多主流 "),a("code",[t._v("Lint")]),t._v(" 工具的概念和使用，还能配合"),a("code",[t._v("husky")]),t._v("、"),a("code",[t._v("lint-staged")]),t._v("、"),a("code",[t._v("VSCode 插件")]),t._v("和"),a("code",[t._v("Vite")]),t._v(" 生态在项目中集成完整的 "),a("code",[t._v("Lint")]),t._v(" 工具链，搭建起完整的前端开发和代码提交工作流，这部分内容虽然和 "),a("code",[t._v("Vite")]),t._v(" 没有直接的联系，但也是 "),a("code",[t._v("Vite")]),t._v(" 项目搭建中非常重要的一环，是前端工程化的必备知识。")]),t._v(" "),a("h2",{attrs:{id:"js-ts-规范工具-eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-ts-规范工具-eslint"}},[t._v("#")]),t._v(" JS/TS 规范工具: ESLint")]),t._v(" "),a("blockquote",[a("p",[t._v("ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。")])]),t._v(" "),a("p",[a("code",[t._v("ESLint")]),t._v(" 的使用并不复杂，主要通过配置文件对各种代码格式的规则("),a("code",[t._v("rules")]),t._v(")进行配置，以指定具体的代码规范。目前开源社区也有一些成熟的规范集可供使用，著名的包括"),a("a",{attrs:{href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb JavaScript 代码规范"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/standard/standard/blob/master/docs/README-zhcn.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Standard JavaScript 规范"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://google.github.io/styleguide/jsguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google JavaScript 规范"),a("OutboundLink")],1),t._v("等等，你可以在项目中直接使用这些成熟的规范，也可以自己定制一套团队独有的代码规范，这在一些大型团队当中还是很常见的。")]),t._v(" "),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),a("p",[t._v("接下来我们来利用 ESLint 官方的 cli 在现有的脚手架项目中进行初始化操作，首先我们需要安装 ESLint:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i eslint -D\n")])])]),a("p",[t._v("接着执行 ESLint 的初始化命令，并进行如下的命令行交互:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("npx eslint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("init\n")])])]),a("img",{attrs:{src:t.$withBase("/assets/vite/7.webp")}}),t._v(" "),a("p",[t._v("接着 "),a("code",[t._v("ESLint")]),t._v(" 会帮我们自动生成"),a("code",[t._v(".eslintrc.js")]),t._v("配置文件。需要注意的是，在上述初始化流程中我们并没有用 npm 安装依赖，需要进行手动安装:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest -D\n")])])]),a("h3",{attrs:{id:"核心配置解读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心配置解读"}},[t._v("#")]),t._v(" 核心配置解读")]),t._v(" "),a("p",[t._v("大家初次接触配置文件可能会有点不太理解，接下来我来为你介绍一下几个核心的配置项，你可以对照目前生成的"),a("code",[t._v(".eslintrc.js")]),t._v("一起学习。")]),t._v(" "),a("h4",{attrs:{id:"_1-parser-解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-parser-解析器"}},[t._v("#")]),t._v(" 1. parser - 解析器")]),t._v(" "),a("p",[a("code",[t._v("ESLint")]),t._v(" 底层默认使用 "),a("a",{attrs:{href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Espree"),a("OutboundLink")],1),t._v("来进行 "),a("code",[t._v("AST")]),t._v(" 解析，这个解析器目前已经基于 "),a("code",[t._v("Acron")]),t._v(" 来实现，虽然说 "),a("code",[t._v("Acron")]),t._v(" 目前能够解析绝大多数的 "),a("a",{attrs:{href:"https://github.com/acornjs/acorn/tree/master/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 规范的语法"),a("OutboundLink")],1),t._v("，但还是不支持 "),a("code",[t._v("TypeScript")]),t._v(" ，因此需要引入其他的解析器完成 TS 的解析。")]),t._v(" "),a("p",[t._v("社区提供了"),a("code",[t._v("@typescript-eslint/parser")]),t._v("这个解决方案，专门为了 "),a("code",[t._v("TypeScript")]),t._v(" 的解析而诞生，将 "),a("code",[t._v("TS")]),t._v(" 代码转换为 "),a("code",[t._v("Espree")]),t._v(" 能够识别的格式(即 "),a("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Estree 格式"),a("OutboundLink")],1),t._v(")，然后在 "),a("code",[t._v("Eslint")]),t._v(" 下通过"),a("code",[t._v("Espree")]),t._v("进行格式检查， 以此兼容了 "),a("code",[t._v("TypeScript")]),t._v(" 语法。")]),t._v(" "),a("h4",{attrs:{id:"_2-parseroptions-解析器选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-parseroptions-解析器选项"}},[t._v("#")]),t._v(" 2. parserOptions - 解析器选项")]),t._v(" "),a("p",[t._v("这个配置可以对上述的解析器进行能力定制，默认情况下 ESLint 支持 ES5 语法，你可以配置这个选项，具体内容如下:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ecmaVersion")]),t._v(": 这个配置和 "),a("code",[t._v("Acron")]),t._v(" 的 "),a("a",{attrs:{href:"https://github.com/acornjs/acorn/tree/master/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("ecmaVersion"),a("OutboundLink")],1),t._v(" 是兼容的，可以配置 "),a("code",[t._v("ES + 数字")]),t._v("(如 ES6)或者"),a("code",[t._v("ES + 年份")]),t._v("(如 ES2015)，也可以直接配置为"),a("code",[t._v("latest")]),t._v("，启用最新的 ES 语法。")]),t._v(" "),a("li",[t._v("sourceType: 默认为"),a("code",[t._v("script")]),t._v("，如果使用 "),a("code",[t._v("ES Module")]),t._v(" 则应设置为"),a("code",[t._v("module")])]),t._v(" "),a("li",[t._v("ecmaFeatures: 为一个对象，表示想使用的额外语言特性，如开启 "),a("code",[t._v("jsx")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"_3-rules-具体代码规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-rules-具体代码规则"}},[t._v("#")]),t._v(" 3. rules - 具体代码规则")]),t._v(" "),a("p",[a("code",[t._v("rules")]),t._v(" 配置即代表在 "),a("code",[t._v("ESLint")]),t._v(" 中手动调整哪些代码规则，比如"),a("strong",[t._v("禁止在 if 语句中使用赋值语句")]),t._v("这条规则可以像如下的方式配置:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其它配置省略")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key 为规则名，value 配置内容")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-cond-assign"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("rules")]),t._v(" 对象中，"),a("code",[t._v("key")]),t._v(" 一般为规则名，"),a("code",[t._v("value")]),t._v(" 为具体的配置内容，在上述的例子中我们设置为一个数组，数组第一项为规则的 "),a("code",[t._v("ID")]),t._v("，第二项为"),a("code",[t._v("规则的配置")]),t._v("。")]),t._v(" "),a("p",[t._v("这里重点说一说规则的 ID，它的语法对所有规则都适用，你可以设置以下的值:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("off")]),t._v(" 或 "),a("code",[t._v("0")]),t._v(": 表示关闭规则。")]),t._v(" "),a("li",[a("code",[t._v("warn")]),t._v(" 或 "),a("code",[t._v("1")]),t._v(": 表示开启规则，不过违背规则后只抛出 "),a("code",[t._v("warning")]),t._v("，而不会导致程序退出。")]),t._v(" "),a("li",[a("code",[t._v("error")]),t._v(" 或 "),a("code",[t._v("2")]),t._v(": 表示开启规则，不过违背规则后抛出 "),a("code",[t._v("error")]),t._v("，程序会退出。")])]),t._v(" "),a("p",[t._v("具体的规则配置可能会不一样，有的是一个字符串，有的可以配置一个对象，你可以参考 "),a("a",{attrs:{href:"https://cn.eslint.org/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 官方文档"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("当然，你也能直接将 "),a("code",[t._v("rules")]),t._v(" 对象的 "),a("code",[t._v("value")]),t._v(" 配置成 "),a("code",[t._v("ID")]),t._v("，如: "),a("code",[t._v('"no-cond-assign": "error"')]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_4-plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-plugins"}},[t._v("#")]),t._v(" 4. plugins")]),t._v(" "),a("p",[t._v("上面提到过 "),a("code",[t._v("ESLint")]),t._v(" 的 "),a("code",[t._v("parser")]),t._v(" 基于"),a("code",[t._v("Acorn")]),t._v("实现，不能直接解析 "),a("code",[t._v("TypeScript")]),t._v("，需要我们指定 "),a("code",[t._v("parser")]),t._v(" 选项为"),a("code",[t._v("@typescript-eslint/parser")]),t._v("才能兼容 TS 的解析。同理，ESLint 本身也没有内置 TypeScript 的代码规则，这个时候 ESLint 的插件系统就派上用场了。我们需要通过添加 ESLint 插件来增加一些特定的规则，比如添加"),a("code",[t._v("@typescript-eslint/eslint-plugin")]),t._v(" 来拓展一些关于 TS 代码的规则，如下代码所示:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加 TS 规则，可省略`eslint-plugin`")]),t._v("\n  plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@typescript-eslint'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("值得注意的是，添加插件后只是拓展了 "),a("code",[t._v("ESLint")]),t._v(" 本身的规则集，但 "),a("code",[t._v("ESLint")]),t._v(" 默认并没有开启这些规则的校验！如果要开启或者调整这些规则，你需要在 "),a("code",[t._v("rules")]),t._v(" 中进行配置，如:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启一些 TS 规则")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@typescript-eslint/ban-ts-comment'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@typescript-eslint/no-explicit-any'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'warn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_5-extends-继承配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-extends-继承配置"}},[t._v("#")]),t._v(" 5. extends - 继承配置")]),t._v(" "),a("p",[t._v("extends 相当于继承另外一份 ESLint 配置，可以配置为一个字符串，也可以配置成一个字符串数组。主要分如下 3 种情况:")]),t._v(" "),a("ol",[a("li",[t._v("从 "),a("code",[t._v("ESLint")]),t._v(" 本身继承；")]),t._v(" "),a("li",[t._v("从类似 "),a("code",[t._v("eslint-config-xxx")]),t._v(" 的 "),a("code",[t._v("npm")]),t._v(" 包继承；")]),t._v(" "),a("li",[t._v("从 "),a("code",[t._v("ESLint")]),t._v(" 插件继承。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第1种情况 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint:recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第2种情况，一般配置的时候可以省略 `eslint-config`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第3种情况，可以省略包名中的 `eslint-plugin`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 格式一般为: `plugin:${pluginName}/${configName}`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:react/recommended"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:@typescript-eslint/recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("有了 "),a("code",[t._v("extends")]),t._v(" 的配置，对于之前所说的 "),a("code",[t._v("ESLint")]),t._v(" 插件中的繁多配置，我们就不需要手动一一开启了，通过 "),a("code",[t._v("extends")]),t._v(" 字段即可自动开启插件中的推荐规则:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:@typescript-eslint/recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h4",{attrs:{id:"_6-env-和-globals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-env-和-globals"}},[t._v("#")]),t._v(" 6. env 和 globals")]),t._v(" "),a("p",[t._v("这两个配置分别表示"),a("strong",[t._v("运行环境")]),t._v("和"),a("strong",[t._v("全局变量")]),t._v("，在指定的运行环境中会预设一些全局变量，比如:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslint.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"env"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"browser"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("指定上述的 "),a("code",[t._v("env")]),t._v(" 配置后便会启用"),a("code",[t._v("浏览器")]),t._v("和 "),a("code",[t._v("Node.js")]),t._v(" 环境，这两个环境中的一些"),a("code",[t._v("全局变量")]),t._v("(如"),a("code",[t._v("window、global")]),t._v(" 等)会同时启用。")]),t._v(" "),a("p",[t._v("有些全局变量是业务代码引入的第三方库所声明，这里就需要在"),a("code",[t._v("globals")]),t._v("配置中声明全局变量了。每个全局变量的配置值有 3 种情况:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v('"writable"')]),t._v("或者 "),a("code",[t._v("true")]),t._v("，表示变量可重写；")]),t._v(" "),a("li",[a("code",[t._v('"readonly"')]),t._v("或者"),a("code",[t._v("false")]),t._v("，表示变量不可重写；")]),t._v(" "),a("li",[a("code",[t._v('"off"')]),t._v("，表示禁用该全局变量。")])]),t._v(" "),a("p",[t._v("那"),a("code",[t._v("jquery")]),t._v("举例，我们可以在配置文件中声明如下:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"globals"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不可重写")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jQuery"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("相信有了上述核心配置部分的讲解，你再回头看看初始化生成的 ESLint 配置文件，你也能很好地理解各个配置项的含义了。")]),t._v(" "),a("h3",{attrs:{id:"与-prettier-强强联合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-prettier-强强联合"}},[t._v("#")]),t._v(" 与 Prettier 强强联合")]),t._v(" "),a("p",[t._v("虽然 "),a("code",[t._v("ESLint")]),t._v(" 本身具备自动格式化代码的功能(eslint --fix)，但术业有专攻，"),a("code",[t._v("ESLint")]),t._v(" 的主要优势"),a("strong",[t._v("在于代码的风格检查")]),t._v("并给出提示，而在代码格式化这一块 "),a("code",[t._v("Prettier")]),t._v(" 做的更加专业，因此我们经常将 "),a("code",[t._v("ESLint")]),t._v(" 结合 "),a("code",[t._v("Prettier")]),t._v(" 一起使用。")]),t._v(" "),a("p",[t._v("首先我们来安装一下 Prettier:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i prettier -D\n")])])]),a("p",[t._v("在项目根目录新建"),a("code",[t._v(".prettierrc.js")]),t._v("配置文件，填写如下的配置内容:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .prettierrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  printWidth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一行的字符数，如果超过会进行换行，默认为80")]),t._v("\n  tabWidth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个 tab 代表几个空格数，默认为 2 个")]),t._v("\n  useTabs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//是否使用 tab 进行缩进，默认为false，表示用空格进行缩减")]),t._v("\n  singleQuote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串是否使用单引号，默认为 false，使用双引号")]),t._v("\n  semi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 行尾是否使用分号，默认为true")]),t._v("\n  trailingComma"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否使用尾逗号")]),t._v("\n  bracketSpacing"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象大括号直接是否有空格，默认为 true，效果：{ a: 1 }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("接下来我们将"),a("code",[t._v("Prettier")]),t._v("集成到现有的"),a("code",[t._v("ESLint")]),t._v("工具中，首先安装两个工具包:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i eslint-config-prettier eslint-plugin-prettier -D\n")])])]),a("p",[t._v("其中"),a("code",[t._v("eslint-config-prettier")]),t._v("用来覆盖 "),a("code",[t._v("ESLint")]),t._v(" 本身的规则配置，而"),a("code",[t._v("eslint-plugin-prettier")]),t._v("则是用于让 "),a("code",[t._v("Prettier")]),t._v(" 来接管"),a("code",[t._v("eslint --fix")]),t._v("即修复代码的能力。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v(".eslintrc.js")]),t._v(" 配置文件中接入 "),a("code",[t._v("prettier")]),t._v(" 的相关工具链，最终的配置代码如下所示，你可以直接粘贴过去:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .eslintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    browser"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    es2021"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint:recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:react/recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:@typescript-eslint/recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 接入 prettier 的规则")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:prettier/recommended"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parser"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@typescript-eslint/parser"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parserOptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ecmaFeatures"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      jsx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ecmaVersion"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"latest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sourceType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 加入 prettier 的 eslint 插件")]),t._v("\n  plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@typescript-eslint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 注意要加上这一句，开启 prettier 自动修复的功能")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier/prettier"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    quotes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"single"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    semi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react/react-in-jsx-scope"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("OK，现在我们回到项目中来见证一下"),a("code",[t._v("ESLint + Prettier")]),t._v("强强联合的威力，在 "),a("code",[t._v("package.json")]),t._v(" 中定义一个脚本:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略已有 script")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint:script"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("接下来在命令行终端执行:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm run lint:script\n")])])]),a("p",[t._v("这样我们就完成了 "),a("code",[t._v("ESLint")]),t._v(" 的规则检查以及 "),a("code",[t._v("Prettier")]),t._v(" 的自动修复。不过每次执行这个命令未免会有些繁琐，我们可以在"),a("code",[t._v("VSCode")]),t._v("中安装"),a("code",[t._v("ESLint")]),t._v("和"),a("code",[t._v("Prettier")]),t._v("这两个插件，并且在设置区中开启"),a("code",[t._v("Format On Save")]),t._v(":")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/8.webp")}}),t._v(" "),a("p",[t._v("接下来在你按Ctrl + S保存代码的时候，Prettier 便会自动帮忙修复代码格式。")]),t._v(" "),a("h2",{attrs:{id:"在-vite-中接入-eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-vite-中接入-eslint"}},[t._v("#")]),t._v(" 在 Vite 中接入 ESLint")]),t._v(" "),a("p",[t._v("除了安装编辑器插件，我们也可以通过 Vite 插件的方式在开发阶段进行 ESLint 扫描，以命令行的方式展示出代码中的规范问题，并能够直接定位到原文件。")]),t._v(" "),a("p",[t._v("首先我们安装 Vite 中的 ESLint 插件:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i vite-plugin-eslint -D\n")])])]),a("p",[t._v("然后在 vite.config.ts 中接入:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" viteEslint "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vite-plugin-eslint'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略其它插件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("viteEslint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在你可以试着重新启动项目， ESLint 的错误已经能够及时显示到命令行窗口中了。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/9.webp")}}),t._v(" "),a("blockquote",[a("p",[t._v("由于这个插件采用另一个进程来运行 ESLint 的扫描工作，因此不会影响 Vite 项目的启动速度，这个大家不用担心。")])]),t._v(" "),a("h2",{attrs:{id:"样式规范工具-stylelint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式规范工具-stylelint"}},[t._v("#")]),t._v(" 样式规范工具: Stylelint")]),t._v(" "),a("p",[t._v("接下来我们进入"),a("code",[t._v("Stylelint")]),t._v("的部分，先来看看官方的定义:")]),t._v(" "),a("blockquote",[a("p",[t._v("Stylelint，一个强大的现代化样式 Lint 工具，用来帮助你避免语法错误和统一代码风格。")])]),t._v(" "),a("p",[a("code",[t._v("Stylelint")]),t._v(" 主要专注于样式代码的规范检查，内置了 170 多个 CSS 书写规则，支持 CSS 预处理器(如 "),a("code",[t._v("Sass")]),t._v("、"),a("code",[t._v("Less")]),t._v(")，提供插件化机制以供开发者扩展规则，已经被 Google、Github 等大型团队投入使用。与 ESLint 类似，在规范检查方面，"),a("code",[t._v("Stylelint")]),t._v(" 已经做的足够专业，而在代码格式化方面，我们仍然需要结合 "),a("code",[t._v("Prettier")]),t._v(" 一起来使用。")]),t._v(" "),a("p",[t._v("首先让我们来安装 Stylelint 以及相应的工具套件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i stylelint stylelint-prettier stylelint-config-prettier stylelint-config-recess-order stylelint-config-standard stylelint-config-standard-scss -D\n")])])]),a("p",[t._v("然后，我们在 "),a("code",[t._v("Stylelint")]),t._v(" 的配置文件"),a("code",[t._v(".stylelintrc.js")]),t._v("中一一使用这些工具套件:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .stylelintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册 stylelint 的 prettier 插件")]),t._v("\n  plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint-prettier'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承一系列规则集合")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// standard 规则集合")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint-config-standard'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// standard 规则集合的 scss 版本")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint-config-standard-scss'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 样式属性顺序规则")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint-config-recess-order'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接入 Prettier 规则")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint-config-prettier'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stylelint-prettier/recommended'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置 rules")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启 Prettier 自动格式化功能")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prettier/prettier'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可以发现 "),a("code",[t._v("Stylelint")]),t._v(" 的配置文件和 "),a("code",[t._v("ESLint")]),t._v(" 还是非常相似的，常用的"),a("code",[t._v("plugins")]),t._v("、"),a("code",[t._v("extends")]),t._v("和"),a("code",[t._v("rules")]),t._v("属性在 "),a("code",[t._v("ESLint")]),t._v(" 同样存在，并且与 "),a("code",[t._v("ESLint")]),t._v(" 中这三个属性的功能也基本相同。不过需要强调的是在 "),a("code",[t._v("Stylelint")]),t._v(" 中 "),a("code",[t._v("rules")]),t._v(" 的配置会和 "),a("code",[t._v("ESLint")]),t._v(" 有些区别，对于每个具体的 rule 会有三种配置方式:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("null")]),t._v("，表示关闭规则。")]),t._v(" "),a("li",[t._v("一个简单值(如 true，字符串，根据不同规则有所不同)，表示开启规则，但并不做过多的定制。")]),t._v(" "),a("li",[t._v("一个数组，包含两个元素，即"),a("code",[t._v("[简单值，自定义配置]")]),t._v("，第一个元素通常为一个简单值，第二个元素用来进行更精细化的规则配置。")])]),t._v(" "),a("p",[t._v("接下来我们将 "),a("code",[t._v("Stylelint")]),t._v(" 集成到项目中，回到 "),a("code",[t._v("package.json")]),t._v(" 中，增加如下的 scripts 配置:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整合 lint 命令")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint:script && npm run lint:style"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stylelint 命令")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint:style"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stylelint --fix \\"src/**/*.{css,scss}\\""')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("执行"),a("code",[t._v("pnpm run lint:style")]),t._v("即可完成样式代码的规范检查和自动格式化。当然，你也可以在 VSCode 中安装"),a("code",[t._v("Stylelint")]),t._v("插件，这样能够在开发阶段即时感知到代码格式问题，提前进行修复。")]),t._v(" "),a("p",[t._v("当然，我们也可以直接在 "),a("code",[t._v("Vite")]),t._v(" 中集成 "),a("code",[t._v("Stylelint")]),t._v("。社区中提供了 "),a("code",[t._v("Stylelint")]),t._v(" 的 Vite 插件，实现在项目开发阶段提前暴露出样式代码的规范问题。我们来安装一下这个插件:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i @amatlash/vite-plugin-stylelint -D\n")])])]),a("p",[t._v("然后在 Vite 配置文件中添加如下的内容:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" viteStylelint "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@amatlash/vite-plugin-stylelint'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略其它插件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("viteStylelint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对某些文件排除检查")]),t._v("\n      exclude"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("windicss|node_modules")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("接下来，你就可以在命令行界面看到对应的 Stylelint 提示了:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/10.webp")}}),t._v(" "),a("h2",{attrs:{id:"husky-lint-staged-的-git-提交工作流集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#husky-lint-staged-的-git-提交工作流集成"}},[t._v("#")]),t._v(" Husky + lint-staged 的 Git 提交工作流集成")]),t._v(" "),a("h3",{attrs:{id:"提交前的代码-lint-检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交前的代码-lint-检查"}},[t._v("#")]),t._v(" 提交前的代码 Lint 检查")]),t._v(" "),a("p",[t._v("在上文中我们提到了安装 "),a("code",[t._v("ESLint")]),t._v("、"),a("code",[t._v("Prettier")]),t._v("和"),a("code",[t._v("Stylelint")]),t._v("的浏览器插件或者 Vite 插件，在开发阶段提前规避掉代码格式的问题，但实际上这也只是将问题提前暴露，并不能保证规范问题能完全被解决，还是可能导致线上的代码出现不符合规范的情况。那么如何来避免这类问题呢？")]),t._v(" "),a("p",[t._v("我们可以在代码提交的时候进行卡点检查，也就是拦截 "),a("code",[t._v("git commit")]),t._v(" 命令，进行代码格式检查，只有确保通过格式检查才允许正常提交代码。社区中已经有了对应的工具——"),a("code",[t._v("Husky")]),t._v("来完成这件事情，让我们来安装一下这个工具:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i husky -D\n")])])]),a("p",[t._v("值得提醒的是，有很多人推荐在"),a("code",[t._v("package.json")]),t._v("中配置 husky 的钩子:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种做法在 Husky 4.x 及以下版本没问题，而在最新版本(7.x 版本)中是无效的！在新版 Husky 版本中，我们需要做如下的事情:")]),t._v(" "),a("ol",[a("li",[t._v("初始化 "),a("code",[t._v("Husky: npx husky install")]),t._v("，并将 "),a("code",[t._v("husky install")]),t._v("作为项目启动前脚本，如:")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会在安装 npm 依赖后自动执行")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"postinstall"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky install"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("添加 Husky 钩子，在终端执行如下命令:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('npx husky add .husky/pre-commit "npm run lint"\n')])])]),a("p",[t._v("接着你将会在项目根目录的"),a("code",[t._v(".husky")]),t._v("目录中看到名为"),a("code",[t._v("pre-commit")]),t._v("的文件，里面包含了 "),a("code",[t._v("git commit")]),t._v("前要执行的脚本。现在，当你执行 "),a("code",[t._v("git commit")]),t._v(" 的时候，会首先执行 "),a("code",[t._v("npm run lint")]),t._v("脚本，通过 Lint 检查后才会正式提交代码记录。")]),t._v(" "),a("p",[t._v("不过，刚才我们直接在 "),a("code",[t._v("Husky")]),t._v(" 的钩子中执行 "),a("code",[t._v("npm run lint")]),t._v("，这会产生一个额外的问题: "),a("code",[t._v("Husky")]),t._v(" 中每次执行"),a("code",[t._v("npm run lint")]),t._v("都对仓库中的代码进行全量检查，也就是说，即使某些文件并没有改动，也会走一次 "),a("code",[t._v("Lint")]),t._v(" 检查，当项目代码越来越多的时候，提交的过程会越来越慢，影响开发体验。")]),t._v(" "),a("p",[t._v("而"),a("code",[t._v("lint-staged")]),t._v("就是用来解决上述全量扫描问题的，可以实现只对存入"),a("code",[t._v("暂存区")]),t._v("的文件进行 Lint 检查，大大提高了提交代码的效率。首先，让我们安装一下对应的 npm 包:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i -D lint-staged\n")])])]),a("p",[t._v("然后在 "),a("code",[t._v("package.json")]),t._v("中添加如下的配置:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/*.{js,jsx,tsx,ts,json}"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint:script"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add --force"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/*.{scss}"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint:style"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add --force"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("接下来我们需要在 "),a("code",[t._v("Husky")]),t._v(" 中应用"),a("code",[t._v("lint-stage")]),t._v("，回到"),a("code",[t._v(".husky/pre-commit")]),t._v("脚本中，将原来的"),a("code",[t._v("npm run lint")]),t._v("换成如下脚本:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("npx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" lint"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("staged\n")])])]),a("p",[t._v("如此一来，我们便实现了提交代码时的"),a("strong",[t._v("增量 "),a("code",[t._v("Lint")]),t._v(" 检查")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"提交时的-commit-信息规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交时的-commit-信息规范"}},[t._v("#")]),t._v(" 提交时的 commit 信息规范")]),t._v(" "),a("p",[t._v("除了代码规范检查之后，Git 提交信息的规范也是不容忽视的一个环节，规范的 commit 信息能够方便团队协作和问题定位。首先我们来安装一下需要的工具库，执行如下的命令:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pnpm i commitlint @commitlint/cli @commitlint/config-conventional -D\n")])])]),a("p",[t._v("接下来新建"),a("code",[t._v(".commitlintrc.js")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .commitlintrc.js")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@commitlint/config-conventional"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("一般我们直接使用"),a("code",[t._v("@commitlint/config-conventional")]),t._v("规范集就可以了，它所规定的 "),a("code",[t._v("commit")]),t._v(" 信息一般由两个部分: "),a("code",[t._v("type")]),t._v(" 和 "),a("code",[t._v("subject")]),t._v(" 组成，结构如下:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// type 指提交的类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// subject 指提交的摘要信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("subject"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("常用的 type 值包括如下:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("feat")]),t._v(": 添加新功能。")]),t._v(" "),a("li",[a("code",[t._v("fix")]),t._v(": 修复 Bug。")]),t._v(" "),a("li",[a("code",[t._v("chore")]),t._v(": 一些不影响功能的更改。")]),t._v(" "),a("li",[a("code",[t._v("docs")]),t._v(": 专指文档的修改。")]),t._v(" "),a("li",[a("code",[t._v("perf")]),t._v(": 性能方面的优化。")]),t._v(" "),a("li",[a("code",[t._v("refactor")]),t._v(": 代码重构。")]),t._v(" "),a("li",[a("code",[t._v("test")]),t._v(": 添加一些测试代码等等。")])]),t._v(" "),a("p",[t._v("接下来我们将"),a("code",[t._v("commitlint")]),t._v("的功能集成到 "),a("code",[t._v("Husky")]),t._v(" 的钩子当中，在终端执行如下命令即可:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("npx husky add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("husky"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("msg "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npx --no-install commitlint -e $HUSKY_GIT_PARAMS"')]),t._v("\n")])])]),a("p",[t._v("你可以发现在"),a("code",[t._v(".husky")]),t._v("目录下多出了"),a("code",[t._v("commit-msg")]),t._v("脚本文件，表示"),a("code",[t._v("commitlint")]),t._v("命令已经成功接入到 "),a("code",[t._v("husky")]),t._v(" 的钩子当中。现在我们可以尝试对代码进行提交，假如输入一个错误的 "),a("code",[t._v("commit")]),t._v(" 信息，"),a("code",[t._v("commitlint")]),t._v(" 会自动抛出错误并退出:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/11.webp")}}),t._v(" "),a("p",[t._v("至此，我们便完成了 Git 提交信息的卡点扫描和规范检查。")]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("本小节你应该了解前端的"),a("strong",[t._v("自动化代码规范工具的使用")]),t._v("以及"),a("strong",[t._v("在 Vite 中的接入方法")]),t._v("。")]),t._v(" "),a("p",[t._v("我主要给你介绍了 3 个方面的自动化代码规范工具:")]),t._v(" "),a("ol",[a("li",[t._v("JavaScript/TypeScript 规范。主流的 Lint 工具包括 "),a("code",[t._v("Eslint")]),t._v("、"),a("code",[t._v("Prettier")]),t._v("；")]),t._v(" "),a("li",[t._v("样式开发规范。主流的 Lint 工具包括"),a("code",[t._v("Stylelint")]),t._v("、"),a("code",[t._v("Prettier")]),t._v("；")]),t._v(" "),a("li",[t._v("Git 提交规范。主流的 Lint 工具包括"),a("code",[t._v("Commitlint")]),t._v("。")])]),t._v(" "),a("p",[t._v("我们可以通过编辑器的插件或者 Vite 插件在开发阶段暴露出规范问题，但也无法保证这类问题在开发时完全被解决掉，因此我们尝试在代码提交阶段来解决这个问题，通过"),a("code",[t._v("Husky+lint-staged")]),t._v("成功地拦截 "),a("code",[t._v("git commit")]),t._v("过程，只有在各项 Lint 检查通过后才能正常提交代码，这样就有效提高了线上代码和 Git 提交信息的质量。")]),t._v(" "),a("p",[t._v("关于样式修复不生效,在 vscode 配置中加上这几行配置即可:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"editor.codeActionsOnSave"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"source.fixAll.stylelint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stylelint.validate"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"css"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"less"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scss"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);