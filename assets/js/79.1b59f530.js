(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{434:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"依赖预构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖预构建"}},[t._v("#")]),t._v(" 依赖预构建")]),t._v(" "),a("p",[t._v("Vite 是一个提倡 "),a("code",[t._v("no-bundle")]),t._v(" 的构建工具，相比于传统的 Webpack，能做到开发时的模块按需编译，而不用先打包完再加载。")]),t._v(" "),a("p",[t._v("需要注意的是，我们所说的模块代码其实分为两部分，一部分是源代码，也就是业务代码，另一部分是第三方依赖的代码，即 "),a("code",[t._v("node_modules")]),t._v(" 中的代码。所谓的 "),a("code",[t._v("no-bundle")]),t._v(" 只是对于源代码而言，对于第三方依赖而言，"),a("code",[t._v("Vite")]),t._v(" 还是选择 "),a("code",[t._v("bundle")]),t._v("(打包)，并且使用速度极快的打包器 "),a("code",[t._v("Esbuild")]),t._v(" 来完成这一过程，达到秒级的依赖编译速度。")]),t._v(" "),a("h2",{attrs:{id:"为什么需要预构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要预构建"}},[t._v("#")]),t._v(" 为什么需要预构建?")]),t._v(" "),a("p",[t._v("为什么在开发阶段我们要对第三方依赖进行预构建? 如果不进行预构建会怎么样？")]),t._v(" "),a("p",[t._v("首先 "),a("code",[t._v("Vite")]),t._v(" 是基于浏览器原生 "),a("code",[t._v("ES")]),t._v(" 模块规范实现的 "),a("code",[t._v("Dev Server")]),t._v("，不论是应用代码，还是第三方依赖的代码，理应符合 "),a("code",[t._v("ESM")]),t._v(" 规范才能够正常运行。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-1.awebp")}}),t._v(" "),a("p",[t._v("但可惜，我们没有办法控制第三方的打包规范。就目前来看，还有相当多的第三方库仍然没有 ES 版本的产物，比如大名鼎鼎的 "),a("code",[t._v("react")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// react 入口文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有 CommonJS 格式")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"production"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./cjs/react.production.min.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./cjs/react.development.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种 "),a("code",[t._v("CommonJS")]),t._v(" 格式的代码在 "),a("code",[t._v("Vite")]),t._v(" 当中无法直接运行，我们需要将它转换成 "),a("code",[t._v("ESM")]),t._v(" 格式的产物。")]),t._v(" "),a("p",[t._v("此外，还有一个比较重要的问题——"),a("strong",[t._v("请求瀑布流问题")]),t._v("。")]),t._v(" "),a("p",[t._v("比如说，知名的"),a("code",[t._v("loadsh-es")]),t._v("库本身是有 "),a("code",[t._v("ES")]),t._v(" 版本产物的，可以在 "),a("code",[t._v("Vite")]),t._v(" 中直接运行。但实际上，它在加载时会发出特别多的请求，导致页面加载的前几秒几都乎处于卡顿状态，拿一个简单的 "),a("code",[t._v("demo")]),t._v(" 项目举例，请求情况如下图所示:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-2.awebp")}}),t._v(" "),a("p",[t._v("我在应用代码中调用了"),a("code",[t._v("debounce")]),t._v("方法，这个方法会依赖很多工具函数，如下图所示:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-3.webp")}}),t._v(" "),a("p",[t._v("每个"),a("code",[t._v("import")]),t._v("都会触发一次新的文件请求，因此在这种依赖层级深、涉及模块数量多的情况下，会触发成百上千个网络请求，巨大的请求量加上 "),a("code",[t._v("Chrome")]),t._v(" 对同一个域名下只能同时支持 6 个 HTTP 并发请求的限制，导致页面加载十分缓慢，与 Vite 主导性能优势的初衷背道而驰。不过，在进行"),a("strong",[t._v("依赖的预构建")]),t._v("之后，"),a("code",[t._v("lodash-es")]),t._v("这个库的代码被打包成了一个文件，这样请求的数量会骤然减少，页面加载也快了许多。下图是进行预构建之后的请求情况，你可以对照看看:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-4.awebp")}}),t._v(" "),a("p",[t._v("总之，依赖预构建主要做了两件事情：")]),t._v(" "),a("ol",[a("li",[t._v("将其他格式(如 UMD 和 CommonJS)的产物转换为 ESM 格式，使其在浏览器通过 "),a("code",[t._v('<script type="module"><script>')]),t._v("的方式正常加载。")]),t._v(" "),a("li",[t._v("打包第三方库的代码，将各个第三方库分散的文件合并到一起，减少 HTTP 请求数量，避免页面加载性能劣化。")])]),t._v(" "),a("p",[t._v("而这两件事情全部由性能优异的 "),a("code",[t._v("Esbuild")]),t._v(" (基于 Golang 开发)完成，而不是传统的 "),a("code",[t._v("Webpack/Rollup")]),t._v("，所以也不会有明显的打包性能问题，反而是 "),a("code",[t._v("Vite")]),t._v(" 项目启动飞快(秒级启动)的一个核心原因。")]),t._v(" "),a("blockquote",[a("p",[t._v("ps: Vite 1.x 使用了 "),a("code",[t._v("Rollup")]),t._v(" 来进行依赖预构建，在 2.x 版本将 "),a("code",[t._v("Rollup")]),t._v(" 换成了 "),a("code",[t._v("Esbuild")]),t._v("，编译速度提升了近 "),a("code",[t._v("100")]),t._v(" 倍！")])]),t._v(" "),a("h2",{attrs:{id:"如何开启预构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何开启预构建"}},[t._v("#")]),t._v(" 如何开启预构建？")]),t._v(" "),a("p",[t._v("在 Vite 中有两种开启预构建的方式，分别是"),a("code",[t._v("自动开启")]),t._v("和"),a("code",[t._v("手动开启")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"自动开启"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动开启"}},[t._v("#")]),t._v(" 自动开启")]),t._v(" "),a("p",[t._v("首先是"),a("code",[t._v("自动开启")]),t._v("。当我们在第一次启动项目的时候，可以在命令行窗口看见如下的信息:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-5.webp")}}),t._v(" "),a("p",[t._v("同时，在项目启动成功后，你可以在根目录下的"),a("code",[t._v("node_modules")]),t._v("中发现"),a("code",[t._v(".vite")]),t._v("目录，这就是预构建产物文件存放的目录，内容如下:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-6.webp")}}),t._v(" "),a("p",[t._v("在浏览器访问页面后，打开 "),a("code",[t._v("Dev Tools")]),t._v(" 中的网络调试面板，你可以发现第三方包的引入路径已经被重写:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 路径被重写，定向到预构建产物文件中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" __vite__cjsImport0_react "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/node_modules/.vite/react.js?v=979739df"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" React "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" __vite__cjsImport0_react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__esModule\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" __vite__cjsImport0_react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" __vite__cjsImport0_react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("并且对于依赖的请求结果，Vite 的 "),a("code",[t._v("Dev Server")]),t._v(" 会设置强缓存:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-7.webp")}}),t._v(" "),a("p",[t._v("缓存过期时间被设置为一年，表示缓存过期前浏览器对 "),a("code",[t._v("react")]),t._v(" 预构建产物的请求不会再经过 "),a("code",[t._v("Vite Dev Server")]),t._v("，直接用缓存结果。")]),t._v(" "),a("p",[t._v("当然，除了 HTTP 缓存，Vite 还设置了本地文件系统的缓存，所有的预构建产物默认缓存在"),a("code",[t._v("node_modules/.vite")]),t._v("目录中。如果以下 3 个地方都没有改动，Vite 将一直使用缓存文件:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("package.json")]),t._v(" 的 "),a("code",[t._v("dependencies")]),t._v(" 字段")]),t._v(" "),a("li",[t._v("各种包管理器的 "),a("code",[t._v("lock")]),t._v(" 文件")]),t._v(" "),a("li",[a("code",[t._v("optimizeDeps")]),t._v(" 配置内容")])]),t._v(" "),a("h3",{attrs:{id:"手动开启"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动开启"}},[t._v("#")]),t._v(" 手动开启")]),t._v(" "),a("p",[t._v("上面提到了预构建中本地文件系统的产物缓存机制，而少数场景下我们不希望用本地的缓存文件，比如需要调试某个包的预构建结果，我推荐使用下面任意一种方法清除缓存，还有手动开启预构建:")]),t._v(" "),a("ol",[a("li",[t._v("删除"),a("code",[t._v("node_modules/.vite")]),t._v("目录。")]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("Vite")]),t._v(" 配置文件中，将"),a("code",[t._v("server.force")]),t._v("设为"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("li",[t._v("命令行执行"),a("code",[t._v("npx vite --force")]),t._v("或者"),a("code",[t._v("npx vite optimize")]),t._v("。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Vite 项目的启动可以分为两步，第一步是"),a("strong",[t._v("依赖预构建")]),t._v("，第二步才是 "),a("code",[t._v("Dev Server")]),t._v(" 的启动，"),a("code",[t._v("npx vite optimize")]),t._v("相比于其它的方案，仅仅完成第一步的功能。")])]),t._v(" "),a("h2",{attrs:{id:"自定义配置详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义配置详解"}},[t._v("#")]),t._v(" 自定义配置详解")]),t._v(" "),a("p",[t._v("前面说到了如何启动预构建的问题，现在我们来谈谈怎样通过 Vite 提供的配置项来定制预构建的过程。Vite 将预构建相关的配置项都集中在"),a("code",[t._v("optimizeDeps")]),t._v("属性上，我们来一一拆解这些子配置项背后的含义和应用场景。")]),t._v(" "),a("h3",{attrs:{id:"入口文件-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入口文件-entries"}},[t._v("#")]),t._v(" 入口文件——entries")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为一个字符串数组")]),t._v("\n    entries"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./src/main.vue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当然，"),a("code",[t._v("entries")]),t._v(" 配置也支持 "),a("a",{attrs:{href:"https://github.com/mrmlnc/fast-glob",target:"_blank",rel:"noopener noreferrer"}},[t._v("glob 语法"),a("OutboundLink")],1),t._v("，非常灵活，如:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将所有的 .vue 文件作为扫描入口")]),t._v("\nentries"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**/*.vue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("不光是"),a("code",[t._v(".vue")]),t._v("文件，"),a("code",[t._v("Vite")]),t._v(" 同时还支持各种格式的入口，包括: "),a("code",[t._v("html")]),t._v("、"),a("code",[t._v("svelte")]),t._v("、"),a("code",[t._v("astro")]),t._v("、"),a("code",[t._v("js")]),t._v("、"),a("code",[t._v("jsx")]),t._v("、"),a("code",[t._v("ts")]),t._v("和"),a("code",[t._v("tsx")]),t._v("。可以看到，只要可能存在"),a("code",[t._v("import")]),t._v("语句的地方，"),a("code",[t._v("Vite")]),t._v(" 都可以解析，并通过内置的扫描机制搜集到项目中用到的依赖，通用性很强。")]),t._v(" "),a("h3",{attrs:{id:"添加一些依赖-include"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加一些依赖-include"}},[t._v("#")]),t._v(" 添加一些依赖——include")]),t._v(" "),a("p",[t._v("除了 "),a("code",[t._v("entries")]),t._v("，"),a("code",[t._v("include")]),t._v(" 也是一个很常用的配置，它决定了可以强制预构建的依赖项，使用方式很简单:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\noptimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置为一个字符串数组，将 `lodash-es` 和 `vue`两个包强制进行预构建")]),t._v("\n  include"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lodash-es"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它在使用上并不难，真正难的地方在于，如何找到合适它的使用场景。前文中我们提到，Vite 会根据应用入口("),a("code",[t._v("entries")]),t._v(")自动搜集依赖，然后进行预构建，这是不是说明 Vite 可以百分百准确地搜集到所有的依赖呢？事实上并不是，某些情况下 Vite 默认的扫描行为并不完全可靠，这就需要联合配置"),a("code",[t._v("include")]),t._v("来达到完美的预构建效果了。接下来，我们好好梳理一下到底有哪些需要配置"),a("code",[t._v("include")]),t._v("的场景。")]),t._v(" "),a("h4",{attrs:{id:"场景一-动态-import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景一-动态-import"}},[t._v("#")]),t._v(" 场景一: 动态 import")]),t._v(" "),a("p",[t._v("在某些动态 "),a("code",[t._v("import")]),t._v(" 的场景下，由于 "),a("code",[t._v("Vite")]),t._v(" 天然按需加载的特性，经常会导致某些依赖只能在运行时被识别出来。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/locales/zh_CN.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" objectAssign "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object-assign"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objectAssign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.tsx")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("importModule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("./locales/")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(".ts")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("importModule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zh_CN"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在这个例子中，动态 "),a("code",[t._v("import")]),t._v(" 的路径只有运行时才能确定，无法在预构建阶段被扫描出来。因此，我们在访问项目时控制台会出现下面的日志信息:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-8.webp")}}),t._v(" "),a("p",[t._v("这段 log 的意思是: "),a("code",[t._v("Vite")]),t._v(" 运行时发现了新的依赖，随之重新进行依赖预构建，并刷新页面。这个过程也叫二次预构建。在一些比较复杂的项目中，这个过程会执行很多次，如下面的日志信息所示:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[vite] new dependencies found: @material-ui/icons/Dehaze, @material-ui/core/Box, @material-ui/core/Checkbox, updating...\n[vite] ✨ dependencies updated, reloading page...\n[vite] new dependencies found: @material-ui/core/Dialog, @material-ui/core/DialogActions, updating...\n[vite] ✨ dependencies updated, reloading page...\n[vite] new dependencies found: @material-ui/core/Accordion, @material-ui/core/AccordionSummary, updating...\n[vite] ✨ dependencies updated, reloading page...\n")])])]),a("p",[t._v("然而，二次预构建的成本也比较大。我们不仅需要把预构建的流程重新运行一遍，还得重新刷新页面，并且需要重新请求所有的模块。尤其是在大型项目中，这个过程会严重拖慢应用的加载速度！因此，我们要尽力避免运行时的"),a("strong",[t._v("二次预构建")]),t._v("。具体怎么做呢？你可以通过"),a("code",[t._v("include")]),t._v("参数提前声明需要按需加载的依赖:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按需加载的依赖都可以声明到这个数组里")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object-assign"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"场景二-某些包被手动-exclude"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景二-某些包被手动-exclude"}},[t._v("#")]),t._v(" 场景二: 某些包被手动 exclude")]),t._v(" "),a("p",[a("code",[t._v("exclude")]),t._v(" 是"),a("code",[t._v("optimizeDeps")]),t._v("中的另一个配置项，与"),a("code",[t._v("include")]),t._v("相对，用于将某些依赖从预构建的过程中排除。不过这个配置并不常用，也不推荐大家使用。如果真遇到了要在预构建中排除某个包的情况，需要注意它所依赖的包是否具有 "),a("code",[t._v("ESM")]),t._v(" 格式，如下面这个例子:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    exclude"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@loadable/component"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看到浏览器控制台会出现如下的报错:")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-9.webp")}}),t._v(" "),a("p",[t._v("这是为什么呢? 我们刚刚手动 exclude 的包"),a("code",[t._v("@loadable/component")]),t._v("本身具有 ESM 格式的产物，但它的某个依赖"),a("code",[t._v("hoist-non-react-statics")]),t._v("的产物并没有提供 ESM 格式，导致运行时加载失败。")]),t._v(" "),a("p",[t._v("这个时候"),a("code",[t._v("include")]),t._v("配置就派上用场了，我们可以强制对"),a("code",[t._v("hoist-non-react-statics")]),t._v("这个间接依赖进行预构建:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 间接依赖的声明语法，通过`>`分开, 如`a > b`表示 a 中依赖的 b")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@loadable/component > hoist-non-react-statics"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在"),a("code",[t._v("include")]),t._v("参数中，我们将所有不具备 "),a("code",[t._v("ESM")]),t._v(" 格式产物包都声明一遍，这样再次启动项目就没有问题了。")]),t._v(" "),a("h2",{attrs:{id:"自定义-esbuild-行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-esbuild-行为"}},[t._v("#")]),t._v(" 自定义 Esbuild 行为")]),t._v(" "),a("p",[a("code",[t._v("Vite")]),t._v(" 提供了"),a("code",[t._v("esbuildOptions")]),t._v(" 参数来让我们自定义 "),a("code",[t._v("Esbuild")]),t._v(" 本身的配置，常用的场景是加入一些 "),a("code",[t._v("Esbuild")]),t._v(" 插件:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    esbuildOptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加入 Esbuild 插件")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个配置主要是处理一些特殊情况，如某个第三方包本身的代码出现问题了。接下来，我们就来讨论一下。")]),t._v(" "),a("h3",{attrs:{id:"特殊情况-第三方包出现问题怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况-第三方包出现问题怎么办"}},[t._v("#")]),t._v(" 特殊情况: 第三方包出现问题怎么办？")]),t._v(" "),a("p",[t._v("由于我们无法保证第三方包的代码质量，在某些情况下我们会遇到莫名的第三方库报错。我举一个常见的案例——"),a("code",[t._v("react-virtualized")]),t._v("库。这个库被许多组件库用到，但它的 "),a("code",[t._v("ESM")]),t._v(" 格式产物有明显的问题，在 "),a("code",[t._v("Vite")]),t._v(" 进行预构建的时候会直接抛出这个错误：")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/vite/7-10.webp")}}),t._v(" "),a("p",[t._v("原因是这个库的 ES 产物莫名其妙多出了一行无用的代码:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WindowScroller.js 并没有导出这个模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bpfrpt_proptype_WindowScroller "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../WindowScroller.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("其实我们并不需要这行代码，但它却导致 "),a("code",[t._v("Esbuild")]),t._v(" 预构建的时候直接报错退出了。那这一类的问题如何解决呢？")]),t._v(" "),a("h4",{attrs:{id:"_1-改第三方库代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-改第三方库代码"}},[t._v("#")]),t._v(" 1. 改第三方库代码")]),t._v(" "),a("p",[t._v("首先，我们能想到的思路是"),a("strong",[t._v("直接修改第三方库的代码")]),t._v("，不过这会带来团队协作的问题，你的改动需要同步到团队所有成员，比较麻烦。")]),t._v(" "),a("p",[t._v("好在，我们可以使用"),a("code",[t._v("patch-package")]),t._v("这个库来解决这类问题。一方面，它能记录第三方库代码的改动，另一方面也能将改动同步到团队每个成员。")]),t._v(" "),a("p",[a("code",[t._v("patch-package")]),t._v(" 官方只支持 "),a("code",[t._v("npm")]),t._v(" 和 "),a("code",[t._v("yarn")]),t._v("，而不支持 "),a("code",[t._v("pnpm")]),t._v("，不过社区中已经提供了支持"),a("code",[t._v("pnpm")]),t._v("的版本，这里我们来安装一下相应的包:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pnpm")]),t._v(" i @milahu/patch-package-with-pnpm-support -D\n")])])]),a("blockquote",[a("p",[t._v("注意: 要改动的包在 "),a("code",[t._v("package.json")]),t._v(" 中必须声明确定的版本，不能有 "),a("code",[t._v("~")]),t._v(" 或者 "),a("code",[t._v("^")]),t._v(" 的前缀。")])]),t._v(" "),a("p",[t._v("接着，我们进入第三方库的代码中进行修改，先删掉无用的 "),a("code",[t._v("import")]),t._v(" 语句，再在命令行输入:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("npx patch-package react-virtualized\n")])])]),a("p",[t._v("现在根目录会多出"),a("code",[t._v("patches")]),t._v("目录记录第三方包内容的更改，随后我们在"),a("code",[t._v("package.json")]),t._v("的"),a("code",[t._v("scripts")]),t._v("中增加如下内容：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略其它 script")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"postinstall"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"patch-package"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这样一来，每次安装依赖的时候都会通过 "),a("code",[t._v("postinstall")]),t._v(" 脚本自动应用 "),a("code",[t._v("patches")]),t._v(" 的修改，解决了团队协作的问题。")]),t._v(" "),a("h4",{attrs:{id:"_2-加入-esbuild-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-加入-esbuild-插件"}},[t._v("#")]),t._v(" 2. 加入 Esbuild 插件")]),t._v(" "),a("p",[t._v("第二种方式是通过 "),a("code",[t._v("Esbuild")]),t._v(" 插件修改指定模块的内容，这里我给大家展示一下新增的配置内容:")]),t._v(" "),a("blockquote",[a("p",[t._v("关于 Esbuild 插件的实现细节，大家不用深究，我们将在底层双引擎的部分给大家展开介绍")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" esbuildPatchPlugin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react-virtualized-patch"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onLoad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        filter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("react-virtualized\\/dist\\/es\\/WindowScroller\\/utils\\/onScroll.js$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"utf8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          contents"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'import { bpfrpt_proptype_WindowScroller } from \"../WindowScroller.js\";'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插件加入 Vite 预构建配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  optimizeDeps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    esbuildOptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      plugins"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("esbuildPatchPlugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("在这一节，你需要重点掌握 "),a("strong",[t._v("Vite 预构建技术的作用")]),t._v("和"),a("strong",[t._v("预构建相关配置的使用")]),t._v("。")]),t._v(" "),a("p",[t._v("Vite 中的依赖预构建技术主要解决了 2 个问题，即模块格式兼容问题和海量模块请求的问题。而 Vite 中开启预构建有 2 种方式，并梳理了预构建产物的缓存策略，推荐了一些手动清除缓存的方法。")]),t._v(" "),a("p",[t._v("接着，我们正式学习了预构建的相关配置——"),a("code",[t._v("entries")]),t._v("、"),a("code",[t._v("include")]),t._v("、"),a("code",[t._v("exclude")]),t._v("和"),a("code",[t._v("esbuldOptions")]),t._v("，并且重点介绍了"),a("code",[t._v("include")]),t._v("配置的各种使用场景和使用姿势。最后，我们讨论了一类特殊情况，即第三方包出现了问题该怎么办，分别给你介绍了两个解决思路: 通过"),a("code",[t._v("patch-package")]),t._v("修改库代码和编写 "),a("code",[t._v("Esbuild")]),t._v(" 插件修改模块加载的内容。")])])}),[],!1,null,null,null);s.default=n.exports}}]);