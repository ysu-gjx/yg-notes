(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{386:function(t,s,e){"use strict";e.r(s);var l=e(45),i=Object(l.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"esbuld-plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#esbuld-plugin"}},[t._v("#")]),t._v(" Esbuld plugin")]),t._v(" "),e("p",[t._v("可否认，作为 Vite 的双引擎之一，Esbuild 在很多关键的构建阶段(如"),e("code",[t._v("依赖预编译")]),t._v("、"),e("code",[t._v("TS 语法转译")]),t._v("、"),e("code",[t._v("代码压缩")]),t._v(")让 Vite 获得了相当优异的性能，是 Vite 高性能的得力助手。无论是在 Vite 的配置项还是源码实现中，都包含了不少 Esbuild 本身的基本概念和高阶用法。")]),t._v(" "),e("h2",{attrs:{id:"为什么-esbuild-性能极高"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-esbuild-性能极高"}},[t._v("#")]),t._v(" 为什么 Esbuild 性能极高？")]),t._v(" "),e("p",[t._v("Esbuild 是由 Figma 的 CTO 「Evan Wallace」基于 Golang 开发的一款打包工具，相比传统的打包工具，主打性能优势，在构建速度上可以比传统工具快 "),e("code",[t._v("10~100")]),t._v(" 倍。那么，它是如何达到这样超高的构建性能的呢？主要原因可以概括为 4 点。")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("使用 Golang 开发")]),t._v("，构建逻辑代码直接被编译为原生机器码，而不用像 JS 一样先代码解析为字节码，然后转换为机器码，大大节省了程序运行时间。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("多核并行")]),t._v("。内部打包算法充分利用多核 CPU 优势，所有的步骤尽可能并行，这也是得益于 Go 当中多线程共享内存的优势。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("从零造轮子")]),t._v("。 几乎没有使用任何第三方库，所有逻辑自己编写，大到 AST 解析，小到字符串的操作，保证极致的代码性能。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("高效的内存利用")]),t._v("。Esbuild 中从头到尾尽可能地复用一份 AST 节点数据，而不用像 JS 打包工具中频繁地解析和传递 AST 数据（如 string -> TS -> JS -> string)，造成内存的大量浪费。")])])]),t._v(" "),e("h2",{attrs:{id:"esbuild-功能使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#esbuild-功能使用"}},[t._v("#")]),t._v(" Esbuild 功能使用")])])}),[],!1,null,null,null);s.default=i.exports}}]);